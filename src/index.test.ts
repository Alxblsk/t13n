import { assert } from "chai";
import { latinize } from "./index";
import { Ruleset } from "./types";

type TestCases = Record<string, string>;

// https://ru.wikipedia.org/wiki/–†–æ–º–∞–Ω–∏–∑–∞—Ü–∏—è_–±–µ–ª–æ—Ä—É—Å—Å–∫–æ–≥–æ_—Ç–µ–∫—Å—Ç–∞_BGN/PCGN
describe("Language: BE", function () {
  describe("Style: BGN/PCGN", function () {
    describe("Single Word Assetions", function () {
      let words: TestCases = {
        "–ø—ñ—è—û–∫–∞": "piyawka",
        "–≤–∞—Ä–∞–∂—É–Ω": "varazhun",
        "–≥–æ–ª–∞–¥": "holad",
        "—Ö–æ–ª–∞–¥": "kholad",
        "–≥—É–∑—ñ–∫": "guzik",
        "–≥–∞–Ω–∞–∫": "ganak",
        "–≥–æ–Ω—Ç": "gont",
        "–º–∞–∑–≥—ñ": "mazgi",
        "–º—è–∑–≥–∞": "myazga",
        "–Ω–∞–¥–≤–æ—Ä‚Äô–µ": "nadvor''ye",
      };

      Object.keys(words).map((word) => {
        it(`should transliterate the word ${word} correctly`, function () {
          assert.equal(latinize(word), words[word]);
        });
      });
    });

    describe("Absent Letters", function () {
      let wrong_words: TestCases = {
        "–¢–æ–º ü§ù –î–∂—ç—Ä—ã": "Tom _ Dzhery",
      };

      Object.keys(wrong_words).map((word) => {
        it(`should not transliterate the word ${word} (wrong letters)`, function () {
          assert.equal(latinize(word), wrong_words[word]);
        });
      });
    });

    describe("Geografic Names", function () {
      let places: TestCases = {
        "–ê–Ω—Ç–æ–Ω": "Anton",
        "–í—ñ–ª–µ–π–∫–∞": "Vilyeyka",
        "–ë—Ä—ç—Å—Ç": "Brest",
        "–î—É–±–Ω–∞": "Dubna",
        "–í—ñ—Ü–µ–±—Å–∫": "Vitsyebsk",
        "–ê—Å—ñ–ø–æ–≤—ñ—á—ã": "Asipovichy",
        "–ì—Ä–æ–¥–Ω–∞": "Hrodna",
        "–ë—Ä–∞–≥—ñ–Ω": "Brahin",
        "–î–æ–±—Ä—É—à": "Dobrush",
        "–õ—ñ–¥–∞": "Lida",
        "–ì–æ–º–µ–ª—å": "Homyel'",
        "–ë–µ–ª—ñ—Ü–∞": "Byelitsa",
        "–Å–¥–∫–∞–≤—ñ—á—ã": "Yodkavichy",
        "–ù—ë–º–∞–Ω": "Nyoman",
        "–ñ–ª–æ–±—ñ–Ω": "Zhlobin",
        "–†—É–∂–∞–Ω—ã": "Ruzhany",
        "–ó–æ—è": "Zoya",
        "–∫–Ω—è–∑—å": "knyaz'",
        "–Ü–≥–Ω–∞—Ç": "Ihnat",
        "–ú—ñ–Ω—Å–∫": "Minsk",
        "–ô–æ—Å–µ–ª—å": "Yosyel'",
        "–ö–æ–π–¥–∞–Ω–∞–≤–∞": "Koydanava",
        "–ö—Ä–∞–ø—ñ—û–Ω–∞": "Krapiwna",
        "–ú–µ–Ω—Å–∫": "Myensk",
        "–õ–∞—û–Ω–∞": "Lawna",
        "–õ—ë—Å—ñ–∫": "Lyosik",
        "–ö—É–ø–∞–ª–∞": "Kupala",
        "–ú—ñ—Ö–∞–ª": "Mikhal",
        "–í—ñ–ª—å–Ω—è": "Vil'nya",
        "–õ–µ–ø–µ–ª—å": "Lyepyel'",
        "–ú–∞–≥—ñ–ª—ë—û": "Mahilyow",
        "–ù—è–º—ñ–≥–∞": "Nyamiha",
        "–ù–∞–≤–∞–≥—Ä–∞–¥–∞–∫": "Navahradak",
        "–ë–∞—Ä–∞–Ω–∞–≤—ñ—á—ã": "Baranavichy",
        "–û—Ä—à–∞": "Orsha",
        "–í–æ—Å—Ç—Ä–∞—û": "Vostraw",
        "–ü—ñ–Ω—Å–∫": "Pinsk",
        "–î–Ω—è–ø—Ä–æ": "Dnyapro",
        "–†–∞–≥–∞—á–æ—û": "Rahachow",
        "–°—É—Ä–∞–∂": "Surazh",
        "–°–º–∞–ª—è–Ω—ã": "Smalyany",
        "–ê—Ä—ç—Å–∞": "Aresa",
        "–†–æ—Å—å": "Ros'",
        "–¢–∞–ª–æ—á—ã–Ω": "Talochyn",
        "–ú–∞—Å—Ç—ã": "Masty",
        "–£–ª–∞–¥–∑—ñ–º—ñ—Ä": "Uladzimir",
        "–ë–∞–±—Ä—É–π—Å–∫": "Babruysk",
        "–ë—ã—Ö–∞—û": "Bykhaw",
        "–í–æ—û–ø–∞": "Vowpa",
        "–Ü—û–µ": "Iwye",
        "–§–æ–ª—é—à": "Folyush",
        "—Ñ–æ—Ä—Ç–∫–∞": "fortka",
        "–•–∞—Ç—ã–Ω—å": "Khatyn'",
        "–ì–∞–Ω—Ü–∞–≤—ñ—á—ã": "Hantsavichy",
        "–°—Ç–æ—û–±—Ü—ã": "Stowbtsy",
        "—Ü—å–º—è–Ω—ã": "ts'myany",
        "–º—è—Å—Ü–æ–≤—ã": "myastsovy",
        "–ê—Å—Ç—Ä–∞–≤–µ—Ü": "Astravyets",
        "–ü—Ä—ã–ø—è—Ü—å": "Prypyats'",
        "–ß—ç—Ä—ã–∫–∞—û": "Cherykaw",
        "–®—á–∞—Ä–∞": "Shchara",
        "–ù–∞—Ä–∞—á": "Narach",
        "–®–∫–ª–æ—û": "Shklow",
        "–ê—à–º—è–Ω—ã": "Ashmyany",
        "–´—Ç—Ç—ã–∫-–ö—ë–ª—å": "Yttyk-Kyol'",
        "–ö–æ–±—Ä—ã–Ω": "Kobryn",
        "–°–æ–ª—ã": "Soly",
        "–ö–æ–ø—ã—Å—å": "Kopys'",
        "—Ä—É–Ω—å": "run'",
        "–≠–π—Å–º–∞–Ω—Ç—ã": "Eysmanty",
        "–ö—Ä—ç–≤–∞": "Kreva",
        "–Æ—Ä—ã": "Yury",
        "—É—é–Ω": "uyun",
        "–Ø–∑—ç–ø": "Yazep",
        "–Ü–≤—è–Ω–µ—Ü": "Ivyanyets",
        "–∑'–µ–∑–¥": "z''yezd",
        "–ë–µ–ª–∞—Ä—É—Å—å": "Byelarus'",
      };

      Object.keys(places).map((place) => {
        it(`should transliterate the name ${place} correctly`, function () {
          assert.equal(latinize(place), places[place]);
        });
      });
    });

    describe("Sentenses", function () {
      let sentenses: TestCases = {
        "–ì—ç—Ç–∞ –±—ã—û —Ü—è–∂–∫—ñ –≥–æ–¥.": "Heta byw tsyazhki hod.",
        "–ü–∞–ø—è—Ä—ç–¥–Ω—ñ –≥–æ–¥ –±—ã—û –ø—Ä–∞—Å—Ü–µ–π—à—ã!": "Papyaredni hod byw prastsyeyshy!",
      };

      Object.keys(sentenses).map((sentense) => {
        it(`should transliterate the sentense ${sentense} correctly`, function () {
          assert.equal(latinize(sentense), sentenses[sentense]);
        });
      });
    });

    describe("URL slug", function () {
      let urlSlugs: TestCases = {
        "–ß–∞–º—É –Ω–∞ —Ç—ç–ª–µ—Ñ–æ–Ω–µ –∑'—è–≤—ñ—û—Å—è —Å—ñ–º–≤–∞–ª #": "Chamu_na_telyefonye_z_yaviwsya_simval__",
      };

      Object.keys(urlSlugs).map((slug) => {
        it(`should transliterate the slug ${slug} correctly`, function () {
          assert.equal(
            latinize(slug, { language: "be", style: "BGN-PCGN", safeOnly: true }),
            urlSlugs[slug]
          );
        });
      });
    });

    describe("Excluded Ranges", function () {
      let excludedRanges: TestCases = {
        "–ú–Ω–µ –∫–∞–∑–∞–ª—ñ, —à—Ç–æ –Ω—É–º–∞—Ä —è–≥–æ –∫–≤–∞—Ç—ç—Ä—ã - 46.": "Mnye kazali, shto numar yaho kvatery - 46.",
        '–ú–∞—Ç—É–ª—è –∑–∞—û—Å—ë–¥—ã —Å–ø—è–≤–∞–ª–∞ –º–Ω–µ "I will allways love you"':
          'Matulya zawsyody spyavala mnye "I will allways love you"',
      };

      Object.keys(excludedRanges).map((rangeItem) => {
        it(`should ignore ranges of symbols in ${rangeItem} correctly`, function () {
          assert.equal(latinize(rangeItem), excludedRanges[rangeItem]);
        });
      });
    });

    it("should pass extra rule correctly", function () {
      const extraRuleset: Ruleset = {
        —å: { type: "L", sound: "C", defaultValue: "" },
      };
      const result = latinize("–ë–µ–ª–∞—Ä—É—Å—å", {
        language: "be",
        style: "BGN-PCGN",
        safeOnly: false,
        extraRuleset,
      });
      assert.equal(result, "Byelarus");
    });
  });

  describe("Style: Latinka", function () {
    const settings = { language: "be", style: "lacinka", safeOnly: false };

    describe("Sentenses", function () {
      let sentenses: TestCases = {
        "–¶—è–ø–µ—Ä –º—ã, –†–∞–¥–∞ –ë–µ–ª–∞—Ä—É—Å–∫–∞–π –ù–∞—Ä–æ–¥–Ω–∞–π –†—ç—Å–ø—É–±–ª—ñ–∫—ñ":
          "Ciapier my, Rada Bie≈Çaruskaj Narodnaj Respubliki",
        "—Å—å–∫—ñ–¥–∞–µ–º –∑ —Ä–æ–¥–Ω–∞–≥–∞ –∫—Ä–∞—é –∞–ø–æ—à–Ω—è–µ —è—Ä–º–æ –¥–∑—è—Ä–∂–∞—û–Ω–∞–π –∑–∞–ª–µ–∂–Ω–∞—Å—å—Ü—ñ":
          "≈õkidajem z rodnaha kraju apo≈°niaje jarmo dziar≈æa≈≠naj zale≈æna≈õci",
        "—è–∫–æ–µ –≥–≤–∞–ª—Ç–∞–º –Ω–∞–∫—ñ–Ω—É–ª—ñ —Ä–∞—Å–µ–π—Å–∫—ñ—è —Ü–∞—Ä—ã –Ω–∞ –Ω–∞—à –≤–æ–ª—å–Ω—ã —ñ –Ω–µ–∑–∞–ª–µ–∂–Ω—ã –∫—Ä–∞–π":
          "jakoje hva≈Çtam nakinuli rasiejskija cary na na≈° volny i niezale≈æny kraj",
        "–ù–∞ –º–æ—Ü—ã –≥—ç—Ç–∞–≥–∞ —Ç—Ä–∞—Ü—è—Ü—å —Å—ñ–ª—É —û—Å–µ —Å—Ç–∞—Ä—ã—è –¥–∑—è—Ä–∂–∞—û–Ω—ã—è –∑—å–≤—è–∑—ñ":
          "Na mocy hetaha traciaƒá si≈Çu ≈≠sie staryja dziar≈æa≈≠nyja ≈∫viazi",
        "—è–∫—ñ—è –¥–∞–ª—ñ –º–∞–≥—á—ã–º–∞—Å—å—Ü—å —á—É–∂–æ–º—É —û—Ä–∞–¥—É –ø–∞–¥–ø—ñ—Å–∞—Ü—å —ñ –∑–∞ –ë–µ–ª–∞—Ä—É—Å—å —Ç—Ä–∞–∫—Ç–∞—Ç —É –ë–µ—Ä–∞—Å—å—Ü—ñ":
          "jakija dali mahƒçyma≈õƒá ƒçu≈æomu ≈≠radu padpisaƒá i za Bie≈Çaru≈õ traktat u Biera≈õci",
        "—à—Ç–æ –∑–∞–±—ñ–≤–∞–µ –Ω–∞ —Å—å–º–µ—Ä—Ü—å –±–µ–ª–∞—Ä—É—Å–∫—ñ –Ω–∞—Ä–æ–¥, –¥–∑–µ–ª—è—á—ã –∑—è–º–ª—é —è–≥–æ –Ω–∞ —á–∞—Å—Ç–∫—ñ":
          "≈°to zabivaje na ≈õmierƒá bie≈Çaruski narod, dzielaƒçy ziamlu jaho na ƒçastki",
        "–ë–µ–ª–∞—Ä—É—Å–∫–∞—è –ù–∞—Ä–æ–¥–Ω–∞—è –†—ç—Å–ø—É–±–ª—ñ–∫–∞ –ø–∞–≤—ñ–Ω–Ω–∞ –∞–±–Ω—è—Ü—å —É—Å–µ –∑–µ–º–ª—ñ":
          "Bie≈Çaruskaja Narodnaja Respublika pavinna abniaƒá usie ziemli",
        "–¥–∑–µ –∂—ã–≤–µ —ñ –º–∞–µ –ª—ñ—á–±–µ–Ω–Ω—É—é –ø–µ—Ä–∞–≤–∞–≥—É –±–µ–ª–∞—Ä—É—Å–∫—ñ –Ω–∞—Ä–æ–¥, –∞ –ª–∞—Å—å–Ω–µ":
          "dzie ≈æyvie i maje liƒçbiennuju pieravahu bie≈Çaruski narod, a ≈Ça≈õnie",
        "–ú–∞–≥—ñ–ª—ë—û—à—á—ã–Ω—É, –±–µ–ª–∞—Ä—É—Å–∫—ñ—è —á–∞—Å—å—Ü—ñ –ú–µ–Ω—à—á—ã–Ω—ã, –ì—Ä–æ–¥–Ω–µ–Ω—à—á—ã–Ω—ã (–∑ –ì—Ä–æ–¥–Ω—è–π, –ë–µ–ª–∞—Å—Ç–æ–∫–∞–º —ñ —ñ–Ω—à.)":
          "Mahilo≈≠≈°ƒçynu, bie≈Çaruskija ƒça≈õci Mien≈°ƒçyny, Hrodnien≈°ƒçyny (z Hrodniaj, Bie≈Çastokam i in≈°.)",
        "–ß–∞—Ä–Ω—ñ–≥–∞—û—à—á—ã–Ω—ã —ñ —Å—É–º–µ–∂–Ω—ã—Ö —á–∞—Å—å—Ü—è—û —Å—É—Å–µ–¥–Ω—ñ—Ö –≥—É–±—ç—Ä–Ω—è—û, –∑–∞—Å–µ–ª–µ–Ω—ã—Ö –±–µ–ª–∞—Ä—É—Å–∞–º—ñ":
          "ƒåarniha≈≠≈°ƒçyny i sumie≈ænych ƒça≈õcia≈≠ susiednich hubernia≈≠, zasielenych bie≈Çarusami",
        "–Ω–µ –∫–∞–∂—ã –ª—ñ—Ç–∞—Ä—É “ë": "nie ka≈æy litaru g",
      };

      Object.keys(sentenses).map((sentense) => {
        it(`should transliterate the sentense ${sentense} correctly`, function () {
          assert.equal(latinize(sentense, settings), sentenses[sentense]);
        });
      });
    });

    describe("Safe symbols only", function () {
      let urlSlugs: TestCases = {
        "–±–µ–ª–∞—Ä—É—Å–∫—ñ –Ω–∞—Ä–æ–¥": "bielaruski_narod",
        "–∑–∞–ª–µ–∂–Ω–∞—Å—å—Ü—ñ": "zaleznasci",
        "–¥–∑—è—Ä–∂–∞—û–Ω—ã—è –∑—å–≤—è–∑—ñ": "dziarzaunyja_zviazi",
      };

      Object.keys(urlSlugs).map((slug) => {
        it(`should transliterate the slug ${slug} correctly`, function () {
          assert.equal(
            latinize(slug, { language: "be", style: "lacinka", safeOnly: true }),
            urlSlugs[slug]
          );
        });
      });
    });
  });

  describe("Style: ISO 9 - A", function () {
    const settings = { language: "be", style: "ISO9A", safeOnly: false };

    describe("Sentenses", function () {
      let sentenses: TestCases = {
        "–¶—è–ø–µ—Ä –º—ã, –†–∞–¥–∞ –ë–µ–ª–∞—Ä—É—Å–∫–∞–π –ù–∞—Ä–æ–¥–Ω–∞–π –†—ç—Å–ø—É–±–ª—ñ–∫—ñ":
          "C√¢per my, Rada Belaruskaj Narodnaj R√®spubl√¨k√¨",
        "—Å—å–∫—ñ–¥–∞–µ–º –∑ —Ä–æ–¥–Ω–∞–≥–∞ –∫—Ä–∞—é –∞–ø–æ—à–Ω—è–µ —è—Ä–º–æ –¥–∑—è—Ä–∂–∞—û–Ω–∞–π –∑–∞–ª–µ–∂–Ω–∞—Å—å—Ü—ñ":
          "s πk√¨daem z rodnaga kra√ª apo≈°n√¢e √¢rmo dz√¢r≈æa«înaj zale≈ænas πc√¨",
        "—è–∫–æ–µ –≥–≤–∞–ª—Ç–∞–º –Ω–∞–∫—ñ–Ω—É–ª—ñ —Ä–∞—Å–µ–π—Å–∫—ñ—è —Ü–∞—Ä—ã –Ω–∞ –Ω–∞—à –≤–æ–ª—å–Ω—ã —ñ –Ω–µ–∑–∞–ª–µ–∂–Ω—ã –∫—Ä–∞–π":
          "√¢koe gvaltam nak√¨nul√¨ rasejsk√¨√¢ cary na na≈° vol πny √¨ nezale≈æny kraj",
        "–ù–∞ –º–æ—Ü—ã –≥—ç—Ç–∞–≥–∞ —Ç—Ä–∞—Ü—è—Ü—å —Å—ñ–ª—É —û—Å–µ —Å—Ç–∞—Ä—ã—è –¥–∑—è—Ä–∂–∞—û–Ω—ã—è –∑—å–≤—è–∑—ñ":
          "Na mocy g√®taga trac√¢c π s√¨lu «îse stary√¢ dz√¢r≈æa«îny√¢ z πv√¢z√¨",
        "—è–∫—ñ—è –¥–∞–ª—ñ –º–∞–≥—á—ã–º–∞—Å—å—Ü—å —á—É–∂–æ–º—É —û—Ä–∞–¥—É –ø–∞–¥–ø—ñ—Å–∞—Ü—å —ñ –∑–∞ –ë–µ–ª–∞—Ä—É—Å—å —Ç—Ä–∞–∫—Ç–∞—Ç —É –ë–µ—Ä–∞—Å—å—Ü—ñ":
          "√¢k√¨√¢ dal√¨ magƒçymas πc π ƒçu≈æomu «îradu padp√¨sac π √¨ za Belarus π traktat u Beras πc√¨",
        "—à—Ç–æ –∑–∞–±—ñ–≤–∞–µ –Ω–∞ —Å—å–º–µ—Ä—Ü—å –±–µ–ª–∞—Ä—É—Å–∫—ñ –Ω–∞—Ä–æ–¥, –¥–∑–µ–ª—è—á—ã –∑—è–º–ª—é —è–≥–æ –Ω–∞ —á–∞—Å—Ç–∫—ñ":
          "≈°to zab√¨vae na s πmerc π belarusk√¨ narod, dzel√¢ƒçy z√¢ml√ª √¢go na ƒçastk√¨",
        "–ë–µ–ª–∞—Ä—É—Å–∫–∞—è –ù–∞—Ä–æ–¥–Ω–∞—è –†—ç—Å–ø—É–±–ª—ñ–∫–∞ –ø–∞–≤—ñ–Ω–Ω–∞ –∞–±–Ω—è—Ü—å —É—Å–µ –∑–µ–º–ª—ñ":
          "Belaruska√¢ Narodna√¢ R√®spubl√¨ka pav√¨nna abn√¢c π use zeml√¨",
        "–¥–∑–µ –∂—ã–≤–µ —ñ –º–∞–µ –ª—ñ—á–±–µ–Ω–Ω—É—é –ø–µ—Ä–∞–≤–∞–≥—É –±–µ–ª–∞—Ä—É—Å–∫—ñ –Ω–∞—Ä–æ–¥, –∞ –ª–∞—Å—å–Ω–µ":
          "dze ≈æyve √¨ mae l√¨ƒçbennu√ª peravagu belarusk√¨ narod, a las πne",
        "–ú–∞–≥—ñ–ª—ë—û—à—á—ã–Ω—É, –±–µ–ª–∞—Ä—É—Å–∫—ñ—è —á–∞—Å—å—Ü—ñ –ú–µ–Ω—à—á—ã–Ω—ã, –ì—Ä–æ–¥–Ω–µ–Ω—à—á—ã–Ω—ã (–∑ –ì—Ä–æ–¥–Ω—è–π, –ë–µ–ª–∞—Å—Ç–æ–∫–∞–º —ñ —ñ–Ω—à.)":
          "Mag√¨l√´«î≈°ƒçynu, belarusk√¨√¢ ƒças πc√¨ Men≈°ƒçyny, Grodnen≈°ƒçyny (z Grodn√¢j, Belastokam √¨ √¨n≈°.)",
        "–ß–∞—Ä–Ω—ñ–≥–∞—û—à—á—ã–Ω—ã —ñ —Å—É–º–µ–∂–Ω—ã—Ö —á–∞—Å—å—Ü—è—û —Å—É—Å–µ–¥–Ω—ñ—Ö –≥—É–±—ç—Ä–Ω—è—û, –∑–∞—Å–µ–ª–µ–Ω—ã—Ö –±–µ–ª–∞—Ä—É—Å–∞–º—ñ":
          "ƒåarn√¨ga«î≈°ƒçyny √¨ sume≈ænyh ƒças πc√¢«î susedn√¨h gub√®rn√¢«î, zaselenyh belarusam√¨",
      };

      Object.keys(sentenses).map((sentense) => {
        it(`should transliterate the sentense ${sentense} correctly`, function () {
          assert.equal(latinize(sentense, settings), sentenses[sentense]);
        });
      });
    });

    describe("URL slug", function () {
      let urlSlugs: TestCases = {
        "–ë–µ–ª–∞—Ä—É—Å—å": "Belarus",
        "–ß–∞–º—É –Ω–∞ —Ç—ç–ª–µ—Ñ–æ–Ω–µ –∑'—è–≤—ñ—û—Å—è —Å—ñ–º–≤–∞–ª #": "Chamu_na_telefone_z_yaviusya_simval__",
      };

      Object.keys(urlSlugs).map((slug) => {
        it(`should transliterate the slug ${slug} correctly`, function () {
          assert.equal(
            latinize(slug, { language: "be", style: "ISO9A", safeOnly: true }),
            urlSlugs[slug]
          );
        });
      });
    });
  });
});
