import { assert } from 'chai';
import { latinize } from './index';
import { Ruleset } from './types';

type TestCases = Record<string, string>;

// https://ru.wikipedia.org/wiki/–†–æ–º–∞–Ω–∏–∑–∞—Ü–∏—è_–±–µ–ª–æ—Ä—É—Å—Å–∫–æ–≥–æ_—Ç–µ–∫—Å—Ç–∞_BGN/PCGN
describe('BE / Single Word Assetion (BGN/PCGN)', function () {
    let words: TestCases = {
        "–ø—ñ—è—û–∫–∞": "piyawka",
        "–≤–∞—Ä–∞–∂—É–Ω": "varazhun",
        "–≥–æ–ª–∞–¥": "holad",
        "—Ö–æ–ª–∞–¥": "kholad",
        "–≥—É–∑—ñ–∫": "guzik",
        "–≥–∞–Ω–∞–∫": "ganak",
        "–≥–æ–Ω—Ç": "gont",
        "–º–∞–∑–≥—ñ": "mazgi",
        "–º—è–∑–≥–∞": "myazga",
        "–Ω–∞–¥–≤–æ—Ä‚Äô–µ": "nadvor''ye"
    }
    
    Object.keys(words).map((word) => {
        it(`should transliterate the word ${word} correctly`, function () {
            assert.equal(latinize(word), words[word]);
        });
    });

    let wrong_words: TestCases = {
        "–¢–æ–º ü§ù –î–∂—ç—Ä—ã": "Tom _ Dzhery"
    }

    Object.keys(wrong_words).map((word) => {
        it(`should not transliterate the word ${word} (wrong letters)`, function () {
            assert.equal(latinize(word), wrong_words[word]);
        });
    });

    let places: TestCases = {
        "–ê–Ω—Ç–æ–Ω": "Anton",
        "–í—ñ–ª–µ–π–∫–∞": "Vilyeyka",
        "–ë—Ä—ç—Å—Ç": "Brest",
        "–î—É–±–Ω–∞": "Dubna",
        "–í—ñ—Ü–µ–±—Å–∫": "Vitsyebsk",
        "–ê—Å—ñ–ø–æ–≤—ñ—á—ã": "Asipovichy",
        "–ì—Ä–æ–¥–Ω–∞": "Hrodna",
        "–ë—Ä–∞–≥—ñ–Ω": "Brahin",
        "–î–æ–±—Ä—É—à": "Dobrush",
        "–õ—ñ–¥–∞": "Lida",
        "–ì–æ–º–µ–ª—å": "Homyel'",
        "–ë–µ–ª—ñ—Ü–∞": "Byelitsa",
        "–Å–¥–∫–∞–≤—ñ—á—ã": "Yodkavichy",
        "–ù—ë–º–∞–Ω": "Nyoman",
        "–ñ–ª–æ–±—ñ–Ω": "Zhlobin",
        "–†—É–∂–∞–Ω—ã": "Ruzhany",
        "–ó–æ—è": "Zoya",
        "–∫–Ω—è–∑—å": "knyaz'",
        "–Ü–≥–Ω–∞—Ç": "Ihnat",
        "–ú—ñ–Ω—Å–∫": "Minsk",
        "–ô–æ—Å–µ–ª—å": "Yosyel'",
        "–ö–æ–π–¥–∞–Ω–∞–≤–∞": "Koydanava",
        "–ö—Ä–∞–ø—ñ—û–Ω–∞": "Krapiwna",
        "–ú–µ–Ω—Å–∫": "Myensk",
        "–õ–∞—û–Ω–∞": "Lawna",
        "–õ—ë—Å—ñ–∫": "Lyosik",
        "–ö—É–ø–∞–ª–∞": "Kupala",
        "–ú—ñ—Ö–∞–ª": "Mikhal",
        "–í—ñ–ª—å–Ω—è": "Vil'nya",
        "–õ–µ–ø–µ–ª—å": "Lyepyel'",
        "–ú–∞–≥—ñ–ª—ë—û": "Mahilyow",
        "–ù—è–º—ñ–≥–∞": "Nyamiha",
        "–ù–∞–≤–∞–≥—Ä–∞–¥–∞–∫": "Navahradak",
        "–ë–∞—Ä–∞–Ω–∞–≤—ñ—á—ã": "Baranavichy",
        "–û—Ä—à–∞": "Orsha",
        "–í–æ—Å—Ç—Ä–∞—û": "Vostraw",
        "–ü—ñ–Ω—Å–∫": "Pinsk",
        "–î–Ω—è–ø—Ä–æ": "Dnyapro",
        "–†–∞–≥–∞—á–æ—û": "Rahachow",
        "–°—É—Ä–∞–∂": "Surazh",
        "–°–º–∞–ª—è–Ω—ã": "Smalyany",
        "–ê—Ä—ç—Å–∞": "Aresa",
        "–†–æ—Å—å": "Ros'",
        "–¢–∞–ª–æ—á—ã–Ω": "Talochyn",
        "–ú–∞—Å—Ç—ã": "Masty",
        "–£–ª–∞–¥–∑—ñ–º—ñ—Ä": "Uladzimir",
        "–ë–∞–±—Ä—É–π—Å–∫": "Babruysk",
        "–ë—ã—Ö–∞—û": "Bykhaw",
        "–í–æ—û–ø–∞": "Vowpa",
        "–Ü—û–µ": "Iwye",
        "–§–æ–ª—é—à": "Folyush",
        "—Ñ–æ—Ä—Ç–∫–∞": "fortka",
        "–•–∞—Ç—ã–Ω—å": "Khatyn'",
        "–ì–∞–Ω—Ü–∞–≤—ñ—á—ã": "Hantsavichy",
        "–°—Ç–æ—û–±—Ü—ã": "Stowbtsy",
        "—Ü—å–º—è–Ω—ã": "ts'myany",
        "–º—è—Å—Ü–æ–≤—ã": "myastsovy",
        "–ê—Å—Ç—Ä–∞–≤–µ—Ü": "Astravyets",
        "–ü—Ä—ã–ø—è—Ü—å": "Prypyats'",
        "–ß—ç—Ä—ã–∫–∞—û": "Cherykaw",
        "–®—á–∞—Ä–∞": "Shchara",
        "–ù–∞—Ä–∞—á": "Narach",
        "–®–∫–ª–æ—û": "Shklow",
        "–ê—à–º—è–Ω—ã": "Ashmyany",
        "–´—Ç—Ç—ã–∫-–ö—ë–ª—å": "Yttyk-Kyol'",
        "–ö–æ–±—Ä—ã–Ω": "Kobryn",
        "–°–æ–ª—ã": "Soly",
        "–ö–æ–ø—ã—Å—å": "Kopys'",
        "—Ä—É–Ω—å": "run'",
        "–≠–π—Å–º–∞–Ω—Ç—ã": "Eysmanty",
        "–ö—Ä—ç–≤–∞": "Kreva",
        "–Æ—Ä—ã": "Yury",
        "—É—é–Ω": "uyun",
        "–Ø–∑—ç–ø": "Yazep",
        "–Ü–≤—è–Ω–µ—Ü": "Ivyanyets",
        "–∑'–µ–∑–¥": "z''yezd",
        "–ë–µ–ª–∞—Ä—É—Å—å": "Byelarus'"
    }

    Object.keys(places).map((place) => {
        it(`should transliterate the name ${place} correctly`, function () {
            assert.equal(latinize(place), places[place]);
        });
    });

    let sentenses: TestCases = {
        "–ì—ç—Ç–∞ –±—ã—û —Ü—è–∂–∫—ñ –≥–æ–¥.": "Heta byw tsyazhki hod.",
        "–ü–∞–ø—è—Ä—ç–¥–Ω—ñ –≥–æ–¥ –±—ã—û –ø—Ä–∞—Å—Ü–µ–π—à—ã!": "Papyaredni hod byw prastsyeyshy!",
    }

    Object.keys(sentenses).map((sentense) => {
        it(`should transliterate the sentense ${sentense} correctly`, function () {
            assert.equal(latinize(sentense), sentenses[sentense]);
        });
    });

    let urlSlugs: TestCases = {
        "–ß–∞–º—É –Ω–∞ —Ç—ç–ª–µ—Ñ–æ–Ω–µ –∑'—è–≤—ñ—û—Å—è —Å—ñ–º–≤–∞–ª #": "Chamu_na_telyefonye_z_yaviwsya_simval__"
    }

    Object.keys(urlSlugs).map((slug) => {
        it(`should transliterate the slug ${slug} correctly`, function () {
            assert.equal(latinize(slug, { language: 'be', style: 'BGN-PCGN', safeOnly: true }), urlSlugs[slug]);
        });
    });

    let excludedRanges: TestCases = {
        '–ú–Ω–µ –∫–∞–∑–∞–ª—ñ, —à—Ç–æ –Ω—É–º–∞—Ä —è–≥–æ –∫–≤–∞—Ç—ç—Ä—ã - 46.': "Mnye kazali, shto numar yaho kvatery - 46.",
        "–ú–∞—Ç—É–ª—è –∑–∞—û—Å—ë–¥—ã —Å–ø—è–≤–∞–ª–∞ –º–Ω–µ \"I will allways love you\"": "Matulya zawsyody spyavala mnye \"I will allways love you\""
    }

    Object.keys(excludedRanges).map((rangeItem) => {
        it(`should ignore ranges of symbols in ${rangeItem} correctly`, function () {
            assert.equal(latinize(rangeItem), excludedRanges[rangeItem]);
        });
    });

    it('should pass extra rule correctly', function() {
        const extraRuleset: Ruleset = { "—å": { type: "L", sound: "C", defaultValue: ""} };
        const result = latinize('–ë–µ–ª–∞—Ä—É—Å—å', { language: 'be', style: 'BGN-PCGN', safeOnly: false, extraRuleset })
        assert.equal(result, 'Byelarus');
    })
    
});